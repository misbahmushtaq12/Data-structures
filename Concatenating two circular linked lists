#include <stdio.h>
#include <stdlib.h>

// Define a structure for a circular linked list node.
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node with the given data.
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = newNode;  // Point to itself to make it circular
    return newNode;
}

// Function to insert a node at the end of a circular linked list.
struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }

    struct Node* tail = head;
    while (tail->next != head) {
        tail = tail->next;
    }

    tail->next = newNode;
    newNode->next = head;
    return head;
}

// Function to concatenate two circular linked lists.
struct Node* concatenateLists(struct Node* head1, struct Node* head2) {
    if (head1 == NULL) {
        return head2;
    }
    if (head2 == NULL) {
        return head1;
    }

    struct Node* tail1 = head1;
    while (tail1->next != head1) {
        tail1 = tail1->next;
    }

    struct Node* tail2 = head2;
    while (tail2->next != head2) {
        tail2 = tail2->next;
    }

    tail1->next = head2;
    tail2->next = head1;

    return head1;
}

// Function to display the elements of a circular linked list.
void displayList(struct Node* head) {
    struct Node* current = head;
    do {
        printf("%d -> ", current->data);
        current = current->next;
    } while (current != head);
    printf(" (head)\n");
}

int main() {
    struct Node* list1 = createNode(1);
    list1 = insertEnd(list1, 2);
    list1 = insertEnd(list1, 3);

    struct Node* list2 = createNode(4);
    list2 = insertEnd(list2, 5);
    list2 = insertEnd(list2, 6);

    printf("Circular Linked List 1:\n");
    displayList(list1);
    printf("Circular Linked List 2:\n");
    displayList(list2);

    list1 = concatenateLists(list1, list2);

    printf("Concatenated Circular Linked List:\n");
    displayList(list1);

    return 0;
}
