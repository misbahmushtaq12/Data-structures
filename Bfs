#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];
int queue[MAX_NODES];
int front = -1, rear = -1;
int numNodes;

void initialize() {
    int i, j;
    for (i = 0; i < MAX_NODES; i++) {
        visited[i] = 0;
        for (j = 0; j < MAX_NODES; j++) {
            graph[i][j] = 0;
        }
    }
}

void addEdge(int from, int to) {
    graph[from][to] = 1;
    graph[to][from] = 1; // For undirected graphs
}

void enqueue(int node) {
    if (rear == MAX_NODES - 1) {
        printf("Queue is full.\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    rear++;
    queue[rear] = node;
}

int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return -1;
    }
    int node = queue[front];
    front++;
    return node;
}

void bfs(int startNode) {
    enqueue(startNode);
    visited[startNode] = 1;

    printf("BFS traversal starting from node %d: ", startNode);

    while (front != -1) {
        int currentNode = dequeue();
        printf("%d ", currentNode);

        for (int i = 0; i < numNodes; i++) {
            if (graph[currentNode][i] && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

int main() {
    initialize();

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    int from, to;
    printf("Enter the edges (from to): (-1 -1 to exit)\n");

    while (1) {
        scanf("%d %d", &from, &to);
        if (from == -1 || to == -1) break;
        addEdge(from, to);
    }

    int startNode;
    printf("Enter the starting node for BFS: ");
    scanf("%d", &startNode);

    bfs(startNode);

    return 0;
}
